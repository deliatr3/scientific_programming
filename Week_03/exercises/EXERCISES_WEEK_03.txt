 _______   _______  ___________  _____ _____ _____ _____ _____ 
|  ___\ \ / /  __ \|  ___| ___ \/  __ \_   _/  ___|  ___/  ___|
| |__  \ V /| /  \/| |__ | |_/ /| /  \/ | | \ `--.| |__ \ `--. 
|  __| /   \| |    |  __||    / | |     | |  `--. \  __| `--. \
| |___/ /^\ \ \__/\| |___| |\ \ | \__/\_| |_/\__/ / |___/\__/ /
\____/\/   \/\____/\____/\_| \_| \____/\___/\____/\____/\____/ 


#-----------------------------------------------------------------------------
# Webscraping with Python and Beautifulsoup
#-----------------------------------------------------------------------------

1.) Run the Jupyter notebook 'webscraping_skipass_prices.ipynb' step by step.

2.) Use pandas to filter the 5 ski resorts with the highest prices of day tickets for adults.
    Hint: use the .loc method

3.) Run the Jupyter notebook 'webscraping_rental_apartments.ipynb' step by step.

4.) Extract the numerical values of area (living area in m2) from area_raw
    Hint: use a regular expression

5.) Create a new column 'price_per_m2' and show the values in a histogram.
    Hint: you can calculate the new variable based on area and price

#-----------------------------------------------------------------------------
# Input & Output in Python
#-----------------------------------------------------------------------------

1.) Run the Jupyter notebook 'input_and_output_Python.ipynb' step by step.

2.) Read the data from the sheet 'cars' in the file 'car_dealer_data.xlsx' in the data folder and store it in a pandas data frame.

3.) Write Python code to show the dimensions of the data frame and select only BMW cars.

4.) Store the data frame with only BMW cars in a .csv file named 'bmw_cars.csv' in the data folder.
	
#-----------------------------------------------------------------------------
# Formatting Strings & Working with Dates in Python
#-----------------------------------------------------------------------------

1.) Run the Jupyter notebook 'formatting_strings_and_dates_Python.ipynb' step by step.

2.) Change the format of the column 'SaleDate' of the table 'Sales' in the cars data to 'datetime' with "%Y-%m-%d".

3.) Calculate the date difference between the formatted 'SaleDate' and the today's date and store it in a new column 'DaysSinceSale'.

4.) Create a new data frame only with the columns 'CarID' and the 'DaysSinceSale' as sales_info.json in the data folder.

#-----------------------------------------------------------------------------
# Writing and Querying SQLite Databases with Python
#-----------------------------------------------------------------------------

1.) Run the Jupyter notebook 'working_with_sqlite_databases.ipynb' step by step.

2.) Create a connection to the SQLite database 'car_dealer_data.db' in the data folder.

3.) Write an SQL statement to select prices >= 10,000 USD and store the result in a pandas data frame.

4.) Create a histogram of the selected prices.

5.) Store the histogram in a file histogram.png in the data folder.

